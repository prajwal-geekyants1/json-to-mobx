'use strict';

/**
 *
 */

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function walkNodes(node, onNode, meta) {
  return _walkNodes(node, onNode, meta, { isRoot: true });
}

function _walkNodes(node, onNode) {
  var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      isRoot = _ref.isRoot;

  var _meta$lineage = meta.lineage,
      lineage = _meta$lineage === undefined ? [] : _meta$lineage,
      _meta$path = meta.path,
      path = _meta$path === undefined ? [] : _meta$path;


  var childMeta = {
    lineage: [].concat(_toConsumableArray(lineage), [node]),
    path: isRoot ? path : [].concat(_toConsumableArray(path), [meta.name])
  };

  if (node.type === 'array') {
    childMeta.isArrayItem = true;
    meta.childArrayItem = _walkNodes(node.items, onNode, childMeta);
  } else if (node.type === 'object') {
    var required = new Set(node.required || []);

    var childProps = meta.childObjectProperties = {};
    for (var prop in node.properties) {
      childMeta.name = prop;
      childMeta.isRequired = required.has(prop);
      childProps[prop] = _walkNodes(node.properties[prop], onNode, childMeta);
    }
  }

  return onNode(node, meta);
}

/**
 *
 */
module.exports = function (node, onNode) {
  return walkNodes(node, onNode);
};